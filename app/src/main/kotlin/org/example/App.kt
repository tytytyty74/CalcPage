/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example

import javafx.application.Application
import javafx.scene.Scene
import javafx.scene.control.Label
import javafx.scene.layout.StackPane
import javafx.stage.Stage
import org.typemeta.funcj.parser.Parser
import org.typemeta.funcj.data.Chr
import org.typemeta.funcj.parser.Text.alpha
import org.typemeta.funcj.parser.Text.intr
import org.typemeta.funcj.parser.Text.ws
import org.typemeta.funcj.parser.Text.chr
import org.typemeta.funcj.parser.Input
import org.example.Expression.*

import org.typemeta.funcj.parser.Combinators.choice
import org.typemeta.funcj.parser.Ref

class App : Application() {
    val greeting: String
        get() {
            return "Hello World!"
        }

    override fun start(stage: Stage) {
        val javaVersion = System.getProperty("java.version")
        val javafxVersion = System.getProperty("javafx.version")
        val l = Label("Hello, JavaFX $javafxVersion, running on Java $javaVersion.")
        val scene = Scene(StackPane(l), 640.0, 480.0)
        stage.scene = scene
        stage.show()
    }

    fun pubLaunch() {
        launch()
    }
}

fun main() {
    test()
    println("hiya")
    val app = App()
    app.pubLaunch()
}

fun test() {
    chr('+')
    chr('*')

    val level1Ops = choice(Operator.Add().parse, Operator.Sub().parse)
    val level1: Ref<Chr, Expression> = Parser.ref()

    val level2Ops = choice(Operator.Mul().parse, Operator.Div().parse)
    val level2: Ref<Chr, Expression> = Parser.ref()

    var temp = level2.and(
        level1Ops.and(level1)
            .map{ a, b -> Pair(a, b)}.optional())
        .map { a, b -> if (b.isEmpty) a else Calculation(b.get().first, a, b.get().second,) }
    level1.set(temp)


    temp = Expression.dbleExpr.and(
        level2Ops.and(level2)
            .map{a, b -> Pair(a, b)}.optional())
        .map {a, b -> if (b.isEmpty) a else Calculation(b.get().first, a, b.get().second,) }
    level2.set(temp)

    val v1 = "-1/2/3/4"
    val v2 = "1-2-3-4-6"
    println("hello world")
    val temp1 = level1.parse(Input.of(v1)).getOrThrow()
    val temp2 = level1.parse(Input.of(v2)).getOrThrow()
    println(temp1.evaluate())
    println(temp1)
    println(temp2.evaluate())
    println(temp2)

}